#!/usr/bin/perl -CS

# This script builds an archive release of a project. It should be run thus:
# $ cd <the project directory>
# $ build_scheme

use utf8;
use strict;
use Getopt::Long;
use File::Temp qw(tempdir);
use Digest::MD5 qw(md5 md5_hex md5_base64);
use JSON::PP;
use Data::Dumper;
use FindBin;                 # locate this script
use lib $FindBin::Bin.'/lib';  # use the parent directory
use FileUtils;
use TerminalColors;
use Dumper;

my $display = 'src';

GetOptions
(
	"display=s" => \$display,
);

my $keyIndex = 0;
my %keyOrder = map {$_, $keyIndex++} qw(token row column offset subnodes);

sub sortKeys
{
	return $keyOrder{$JSON::PP::a} <=> $keyOrder{$JSON::PP::b};
}

my $json = JSON::PP->new->pretty->canonical->sort_by(\&sortKeys);

foreach my $path (@ARGV)
{
	search(\&handle_file, $path);
}

sub handle_file
{
	my $path = join "/", @_;
	if ($path =~ /\.c$/ || $path =~ /\.m$/)
	{
		if (system "clang", "-I.", "-Wno-everything", "-o", "/dev/null", $path)
		{
			die $path;
		}
				
		my $content = read_file('UTF-8', $path);

		warn $path,"\n";
		my $root = tokeniseContent($content);
	
		if ($root)
		{
			if ($display eq 'tree')
			{
				my $content = encodeTree($root);
				$content =~ s/^  //gm;
				print $content;
			}
			elsif ($display eq 'src')
			{
				my $content = encodeC($root);
				print $content;
			}
			elsif ($display eq 'dump')
			{
				my $content = Dumper($root);
				print $content;
			}
# 			print qq(<link rel="stylesheet" type="text/css" href="/Volumes/Personal/Repositories/c-flat/cblang.css">).encodeXML($root);
			exit;
		}
	}
	
	return 1;
}

sub tokeniseContent
{
	my ($content) = @_;
	
	my $operatorSet = quotemeta('!%&*+,-./:;<=>?@\\~^|');

	my @tokens = grep {length} $content =~ m!(\/\*.*?\*/)|(\/\/[^\n]*)|("(?:\\.|[^"])*")|('(?:\\.|[^'])*')|(#[^\n]*)|(else +if)|([A-Za-z][_0-9A-Za-z]+)|(\d+(?:\.\d+)?)|( +)|(\n)|([${operatorSet}]+)|(.)!gs;
	
	my $root = {'subnodes'=>[]};
	my @stack = ($root);
	
	my $row = 1;
	my $column = 1;
	my $offset = 0;
	
	foreach my $token (@tokens)
	{
		my $isMatched = 0;
		if ($token =~ /^[{\(\[]$/)
		{
			$isMatched = 1;
			my $subnodes = [];
			my $node = {'subnodes'=>$subnodes, comment => $token};
			push @{$stack[-1]{'subnodes'}}, $node;
			push @stack, $node;
		}

		if ($token =~ /^[}\)\]]$/)
		{
			$isMatched = 1;
			$stack[-1]{'comment'} .= ' … '.$token;
			pop @stack;
		}

		if ($token !~ /^[ \t\n]+$/)
		{
			push @{$stack[-1]{'subnodes'}}, {'token'=>$token, 'row' => $row, 'column' => $column, 'offset' => $offset, 'subnodes'=>[], isMatched => $isMatched};
		}
		
		if ($token =~ /^[{\(\[]$/)
		{
			my $subnodes = [];
			my $node = {'subnodes'=>$subnodes, comment => $token};
			push @{$stack[-1]{'subnodes'}}, $node;
			push @stack, $node;
		}
		
		if ($token =~ /^[}\)\]]$/)
		{
			$stack[-1]{'comment'} .= $token;
			pop @stack;
		}

		
		if ($token =~ /\n/)
		{
			$row += () = $token =~ /\n/g;
			$column = 0;
		}
		$column += length $token =~ /([^\n]+)$/;

		$offset += length $token;
	}
	
	$root = splitSubnodesOnRegex($root, qr/^#/);
	$root = splitSubnodesOnRegex($root, qr/^\/\*/);
	$root = splitSubnodesOnRegex($root, qr/^\/\//);
	
	# https://cs.wmich.edu/~gupta/teaching/cs4850/sumII06/The%20syntax%20of%20C%20in%20Backus-Naur%20form.htm
	# http://en.cppreference.com/w/c/language/operator_precedence
	
	$root = splitSubnodesOnRegex($root, qr/^if$/);
	$root = splitSubnodesOnRegex($root, qr/^else +if$/);
	$root = splitSubnodesOnRegex($root, qr/^else$/);
	
	my @tokens = reverse qw
	(
		++ -- . ->
		! ~
		* / %
		+ -
		<< >>
		< <=
		> >=
		== !=
		&
		^
		|
		&&
		||
		: ?
		= += -= *= /* %= <<= >>= &= ^= |=
		,
		return while do for
		;
	);
	
	foreach my $token (map {quotemeta} @tokens)
	{
		$root = splitSubnodesOnRegex($root, qr/^${token}$/);
	}
	
# 	$root = splitSubnodesOnRegex($root, qr/^[\$_a-z0-9]+$/);

	return $root;
}

sub splitSubnodesOnRegex
{
	my ($node, $regex) = @_;
	
# 	my $cleanNode = {%{$node}, 'subnodes'=>[]};
# 	
# 	$cleanNode->{'subnodes'} = [];
	
	my @subnodes = @{$node->{'subnodes'}};
	
	for (my $index=0;$index<@subnodes;$index++)
	{
		if ($subnodes[$index]{'token'} =~ $regex)
		{
			my @splitSubnodes;
			
			$subnodes[$index]{'isMatched'} = 1;
			my $match = $&; 
			push @splitSubnodes, {'subnodes'=>[splice @subnodes, 0, $index], 'comment'=> '… '.$match} if $index > 0;
			push @splitSubnodes, splice @subnodes, 0, 1;
			push @splitSubnodes, {'subnodes'=>[@subnodes], 'comment'=> $match.' …'} if @subnodes;
			@subnodes = @splitSubnodes;
			last;
		}
	}

	
	if (@subnodes)
	{
		return {%{$node}, 'subnodes'=>[map {splitSubnodesOnRegex($_, $regex)} @subnodes]}
	}
	else
	{
		return $node;
	}
}

sub encodeTree
{
	my ($node, @supernodes) = @_;
	my $content = "";
	if (exists $node->{'token'})
	{
		if ($node->{'isMatched'})
		{
			$content .= push_rgb_color(3,0,0);
		}
		$content .= $node->{'token'};
		if ($node->{'isMatched'})
		{
			$content .= pop_color();
		}
	}
	else
	{
		$content .= push_gray_color(0.6);
		$content .= '«»';
		$content .= pop_color();
	}
	if (defined $node->{'comment'})
	{
		$content .= push_color(28);
		$content .= '  '.$node->{'comment'};
		$content .= pop_color();
	}
	$content .= "\n";
	
	foreach my $subnode (@{$node->{'subnodes'}})
	{
		$content .= encodeTree($subnode, $node, @supernodes);
	}
	
# 	if (exists $node->{'token'})
	{
		$content =~ s/\n/\n  /g;
		$content =~ s/ +$//;
		$content = "  ".$content;
	}
	return $content;
}

sub encodeC
{
	my ($node) = @_;
	my $content = "";
	encodeContent(\$content, 0, $node);
	return $content;
}

sub encodeContent
{
	my ($contentRef, $depth, $node, @supernodes) = @_;
	
	if ('HASH' ne ref $node)
	{
		die Dumper(@supernodes);
	}
	
	if (($$contentRef =~ /\n$/ || $$contentRef eq '') && $node->{'token'} ne '{}')
	{
		$$contentRef .= "    " x $depth;
	}
	elsif ($$contentRef =~ /}$/)
	{
		$$contentRef .= "\n";
		$$contentRef .= "    " x $depth;
		$depth++;
	}
	elsif ($$contentRef !~ /[ \(\{\[]$/)
	{
		$$contentRef .= " ";
	}
	
	if ($node->{'token'} eq '()')
	{	
		$$contentRef =~ s/ $//;
		$$contentRef .= "(";
	}
	elsif ($node->{'token'} eq '{}')
	{
		$$contentRef .= "\n";
		$$contentRef .= "    " x $depth;
		$$contentRef .= "{\n";
		$depth++;
	}
	
	foreach my $subnode (@{$node->{'subnodes'}})
	{
		encodeContent($contentRef, $depth, $subnode, $node, @supernodes);
	}

	if ($node->{'token'} eq '()')
	{
		$$contentRef =~ s/,$//;

		$$contentRef .= ")";
	}
	elsif ($node->{'token'} eq '{}')
	{
		$depth--;
		if ($$contentRef =~ /\n$/ || $$contentRef eq '')
		{
			$$contentRef .= "    " x $depth;
		}

		$$contentRef .= "}";
		
		if (@supernodes && $supernodes[0]{'token'} ne ';')
		{
			$$contentRef .= "\n";
		}
		
	}
	elsif ($node->{'token'} eq ';')
	{
		$$contentRef =~ s/,$//;
		if ($$contentRef =~ /\n$/ || $$contentRef eq '')
		{
			$$contentRef .= "    " x $depth;
		}
		
		$$contentRef .= ";\n";
	}
	elsif ($node->{'token'} =~ /^\/\*/ || $node->{'token'} =~ /^#/)
	{
		$$contentRef .= $node->{'token'};
		$$contentRef .= "\n";
	}
	else
	{
		$$contentRef .= $node->{'token'};
	}
}
